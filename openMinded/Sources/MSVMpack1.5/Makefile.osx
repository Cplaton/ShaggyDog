# Version
VERSION=1.5

# Detect SSE instruction set (SSE2, SSE3 or SSE4.1...)
#SSE=`TESTSSE42=\`sysctl -a hw | grep sse4_2 | wc -l;\`; if [ $$TESTSSE42 -eq 0 ]; then (TESTSSE41=\`sysctl -a hw | grep sse4_1 | wc -l;\`; if [ $$TESTSSE41 -eq 0 ]; then (TESTSSE3=\`sysctl -a hw | grep sse3 | wc -l;\` ; if [ $$TESTSSE3 -eq 0 ]; then echo -msse2; else echo -msse3; fi); else echo -msse4.1; fi); else echo -msse4.2; fi`

# MSVMpack cannot use SSE instructions on Mac OSX yet
SSE=-msse2

# Default flags for GCC: use level 3 optimization
DEBUG=-O3
CFLAGS=$(DEBUG) $(SSE) -mfpmath=sse -DVERSION=$(VERSION)

# Flags required by lp_solve
LPSOLVELINK= -ldl

# Default directories for MSVMpack include and lib
INCLUDE= -Iinclude/ -Ilp_solve_5.5/
LIB= -Llib/ 
CURRENT_DIR= `pwd`

# Directories for web server
WEBDIR=webpages/
WEBSRC=src/web/
DIR=\"`pwd`\"
MONGOOSEDIR=mongoose/


# Default rule: use 'make' to build all
welcome: 
	@echo
	@echo "... Building MSVMpack $(VERSION) ..."
	@echo "(parallel implementation for Mac OSX)"
	@echo 
#	@echo "Using SSE flag '$(SSE)' for vectorized kernels... "
#	@echo "(use e.g. 'make SSE=-msse2' to change that)"
#	@echo
	@make -f Makefile.osx all
	@echo
	@echo "**************************************"
	@echo "MSVMpack build completed successfully."
	@echo "Static library 'libmsvm.a' stored in $(CURRENT_DIR)/lib/."
	@echo "You can now use 'trainmsvm' and 'predmsvm' command-line tools."
	@echo "**************************************"
	@echo
	@echo "... Now building MSVMpack Server ..."
	@echo
	@make -f Makefile.osx server		
	
all: lib/libmsvm.a trainmsvm predmsvm
	
	
# Debugging rules: use 'make debug' to build for debugging purposes	
debug: 
	make -f Makefile.osx DEBUG="-g -O0" SSE="-msse2"

# or 'make profile' for performance analysis
profile: 
	make -f Makefile.osx DEBUG="-g -pg -O3"


# Use 'make clean' to remove all compiled objects, library and executables
clean:
	rm -f lib/*.a src/*.o trainmsvm predmsvm 	
	
# Use 'make install' for a system-wide install of the command-line tools 
install: trainmsvm predmsvm
	cp trainmsvm /usr/local/bin/
	cp predmsvm /usr/local/bin/
	cp tools/plotlog /usr/local/bin/
	cp tools/plotlog_msvm2 /usr/local/bin/
	
# Use 'make uninstall' to remove the system-wide install 
# (does not remove the MSVMpack directory)
uninstall: 
	rm -f /usr/local/bin/trainmsvm /usr/local/bin/predmsvm /usr/local/bin/plotlog
	
# Use 'make package' to generate a clean archive MSVMpack.tar.gz
# (this requires 'lp_solve_5.5.0.15_source.tar.gz' in the parent directory)
# Note that this will REMOVE ALL MODEL FILES from the MSVMpack directory
package: clean
	rm -f *.model *.tmp *.outputs *.log .*.log .*.gnuplot *.ps *.out *~ doc/*~ doc/*.outputs doc/*.model src/*~ include/*~ Save_alpha/* matlab/*~
	-rm -rf lp_solve_5.5
	-rm -f doc/example
	-rm -rf package
	tar -zxvf ../lp_solve_5.5.0.15_source.tar.gz 	
	cd .. ; tar -zcvf MSVMpack$(VERSION).tar.gz MSVMpack$(VERSION) --exclude-vcs
	mkdir package
	mv ../MSVMpack$(VERSION).tar.gz package/
	
	
#### Rules for internal use ###

# Make the MSVMpack static library 'libmsvm.a'
lib/libmsvm.a: src/libMSVM.o src/kernel.o src/libtrainMSVM.o src/libevalMSVM.o src/libtrainMSVM_WW.o src/libevalMSVM_WW.o src/libtrainMSVM_CS.o src/libevalMSVM_CS.o src/libtrainMSVM_LLW.o src/libevalMSVM_LLW.o src/libtrainMSVM_2.o src/libtrainMSVM_2fw.o src/libevalMSVM_2.o src/biblio.o src/algebra.o lib/liblpsolve55.a
	@cd lib ; ar x liblpsolve55.a
	@ar rcs lib/libmsvm.a src/libMSVM.o src/kernel.o src/libtrainMSVM.o src/libtrainMSVM_WW.o src/libevalMSVM.o src/libevalMSVM_WW.o src/libtrainMSVM_CS.o src/libevalMSVM_CS.o src/libtrainMSVM_LLW.o src/libevalMSVM_LLW.o src/libtrainMSVM_2.o src/libtrainMSVM_2fw.o src/libevalMSVM_2.o src/biblio.o src/algebra.o lib/*.o
	@rm lib/*.o
	@echo libmsvm.a...
	
# Get either osx32/liblpsolve55.a or osx64/liblpsolve55.a
lib/liblpsolve55.a: lp_solve_5.5/lpsolve55/bin/liblpsolve55.a
	-@cp lp_solve_5.5/lpsolve55/bin/liblpsolve55.a lib/

# This builds the lp_solve API
lp_solve_5.5/lpsolve55/bin/liblpsolve55.a:
	@echo "Building lp_solve library (this may take some time)..."
	@cd lp_solve_5.5/lpsolve55 ; sh ccc.osx
	-@cp lp_solve_5.5/lpsolve55/bin/osx32/liblpsolve55.a lp_solve_5.5/lpsolve55/bin/ 2>/dev/null
	-@cp lp_solve_5.5/lpsolve55/bin/osx64/liblpsolve55.a lp_solve_5.5/lpsolve55/bin/ 2>/dev/null
	
# Make object files
src/libMSVM.o: src/libMSVM.c src/custom_kernels.c
	@gcc -o src/libMSVM.o -c src/libMSVM.c $(CFLAGS) $(INCLUDE)
	@echo libMSVM.o...

src/kernel.o: src/kernel.c src/custom_kernels.c
	@gcc -o src/kernel.o -c src/kernel.c $(CFLAGS) $(INCLUDE)
	@echo kernel.o...
	
src/libtrainMSVM.o: src/libtrainMSVM.c
	@gcc -o src/libtrainMSVM.o -c src/libtrainMSVM.c $(CFLAGS) $(INCLUDE)
	@echo libtrainMSVM.o...
	
src/libevalMSVM.o: src/libevalMSVM.c
	@gcc -c src/libevalMSVM.c -o src/libevalMSVM.o $(CFLAGS) $(INCLUDE)
	@echo libevalMSVM.o...
		
src/libtrainMSVM_2.o: src/libtrainMSVM_2.c
	@gcc -o src/libtrainMSVM_2.o -c src/libtrainMSVM_2.c $(CFLAGS) $(INCLUDE)
	@echo libtrainMSVM_2.o...

src/libtrainMSVM_2fw.o: src/libtrainMSVM_2fw.c
	@gcc -o src/libtrainMSVM_2fw.o -c src/libtrainMSVM_2fw.c $(CFLAGS) $(INCLUDE)
	@echo libtrainMSVM_2fw.o...

src/libevalMSVM_2.o: src/libevalMSVM_2.c
	@gcc -c src/libevalMSVM_2.c -o src/libevalMSVM_2.o $(CFLAGS) $(INCLUDE)
	@echo libevalMSVM_2.o...

src/libtrainMSVM_WW.o: src/libtrainMSVM_WW.c 
	@gcc -o src/libtrainMSVM_WW.o -c src/libtrainMSVM_WW.c $(CFLAGS) $(INCLUDE)
	@echo libtrainMSVM_WW.o...

src/libevalMSVM_WW.o: src/libevalMSVM_WW.c
	@gcc -c src/libevalMSVM_WW.c -o src/libevalMSVM_WW.o $(CFLAGS) $(INCLUDE)
	@echo libevalMSVM_WW.o...
		
src/libtrainMSVM_CS.o: src/libtrainMSVM_CS.c
	@gcc -o src/libtrainMSVM_CS.o -c src/libtrainMSVM_CS.c $(CFLAGS) $(INCLUDE) 
	@echo libtrainMSVM_CS.o...
	
src/libevalMSVM_CS.o: src/libevalMSVM_CS.c
	@gcc -c src/libevalMSVM_CS.c -o src/libevalMSVM_CS.o $(CFLAGS) $(INCLUDE)
	@echo libevalMSVM_CS.o...
	
src/libtrainMSVM_LLW.o: src/libtrainMSVM_LLW.c
	@gcc -o src/libtrainMSVM_LLW.o -c src/libtrainMSVM_LLW.c $(CFLAGS) $(INCLUDE) 
	@echo libtrainMSVM_LLW.o...
	
src/libevalMSVM_LLW.o: src/libevalMSVM_LLW.c
	@gcc -c src/libevalMSVM_LLW.c -o src/libevalMSVM_LLW.o $(CFLAGS) $(INCLUDE)
	@echo libevalMSVM_LLW.o...
	
src/algebra.o: src/algebra.c
	@gcc -c src/algebra.c -o src/algebra.o $(CFLAGS) $(INCLUDE)
	@echo algebra.o...
	
src/biblio.o: src/biblio.c
	@gcc -c src/biblio.c -o src/biblio.o $(CFLAGS) $(INCLUDE)
	@echo biblio.o...
		
# Make command-line tools
#
#	use '-Llib/ -lmsvm' to link with the MSVMpack library
#   
trainmsvm: src/trainMSVM.c lib/libmsvm.a
	@gcc -o trainmsvm src/trainMSVM.c $(CFLAGS) $(INCLUDE) $(LIB) -lmsvm -lm $(LPSOLVELINK)
	@echo trainmsvm...
predmsvm: src/predMSVM.c lib/libmsvm.a
	@gcc -o predmsvm src/predMSVM.c $(CFLAGS) $(INCLUDE) $(LIB) -lmsvm -lm
	@echo predmsvm...



# Make MSVMpack web server
#
server: $(WEBDIR)trainmsvm $(WEBDIR)predmsvm $(WEBDIR)home.cgi $(WEBDIR)Server.cgi $(WEBDIR)upload.cgi $(WEBDIR)upload_libsvm.cgi $(WEBDIR)upload_raw.cgi $(WEBDIR)admin/admin.cgi $(WEBDIR)admin/delete.cgi $(WEBDIR)convert datadir msvmserver 
	@echo
	@echo "**************************************"	
	@echo MSVMpack Server build completed. 
	@echo 
	@echo "Use 'msvmserver start' in "
	@echo $(DIR)
	@echo to start the server. 
	@echo "**************************************"
	@echo
		
# Copy MSVMpack binaries to server

$(WEBDIR)trainmsvm: trainmsvm
	@echo "trainmsvm..."
	@cp trainmsvm $(WEBDIR)
	
$(WEBDIR)predmsvm: predmsvm
	@echo "predmsvm..."
	@cp predmsvm $(WEBDIR)
	
# Web CGI pages

$(WEBDIR)home.cgi: $(WEBSRC)home.c
	@echo home.cgi...
	@gcc -O3 -o $(WEBDIR)home.cgi $(WEBSRC)home.c -DVERSION=$(VERSION)
	
$(WEBDIR)Server.cgi: $(WEBSRC)Server.c
	@echo Server.cgi...
	@gcc -O3 -o $(WEBDIR)Server.cgi $(WEBSRC)Server.c -DVERSION=$(VERSION)
	
$(WEBDIR)upload.cgi: $(WEBSRC)upload.c
	@echo upload.cgi...
	@gcc -O3 -o $(WEBDIR)upload.cgi $(WEBSRC)upload.c

$(WEBDIR)upload_libsvm.cgi: $(WEBSRC)upload_libsvm.c
	@echo upload_libsvm.cgi...
	@gcc -O3 -o $(WEBDIR)upload_libsvm.cgi $(WEBSRC)upload_libsvm.c

$(WEBDIR)upload_raw.cgi: $(WEBSRC)upload_raw.c
	@echo upload_raw.cgi...
	@gcc -O3 -o $(WEBDIR)upload_raw.cgi $(WEBSRC)upload_raw.c

$(WEBDIR)admin/admin.cgi: $(WEBSRC)admin.c
	@echo admin.cgi...
	@gcc -O3 -o $(WEBDIR)admin/admin.cgi $(WEBSRC)admin.c -DVERSION=$(VERSION)
	
$(WEBDIR)admin/delete.cgi: $(WEBSRC)delete.c
	@echo delete.cgi...
	@gcc -o $(WEBDIR)admin/delete.cgi $(WEBSRC)delete.c
	
$(WEBDIR)convert: $(WEBSRC)convert.c
	@echo convert...
	@gcc -o $(WEBDIR)convert $(WEBSRC)convert.c

datadir:
	@echo "Data/..."
	@cp Data/* $(WEBDIR)Data/

# Server executable
$(MONGOOSEDIR)mongoose: 
	@echo "Building mongoose http server..."
	@cd $(MONGOOSEDIR); make CFLAGS=" -W -std=c99 -pedantic -O2" mac
	
msvmserver: $(WEBSRC)msvmserver.c $(MONGOOSEDIR)mongoose
	@echo msvmserver...
	@gcc -O3 -o msvmserver $(WEBSRC)msvmserver.c -DDIR=$(DIR)

# Clean web server	
server-clean: 
	-./msvmserver stop
	rm -f $(WEBDIR)home.cgi $(WEBDIR)Server.cgi $(WEBDIR)upload.cgi $(WEBDIR)upload_libsvm.cgi $(WEBDIR)upload_raw.cgi $(WEBDIR)admin/admin.cgi $(WEBDIR)admin/delete.cgi $(WEBDIR)trainmsvm $(WEBDIR)predmsvm $(WEBDIR)convert msvmserver

# Package web server
server-package: server-clean	
	-rm -f $(WEBDIR)training.out
	-rm -f $(WEBDIR)Data/*	
	-rm -f $(WEBDIR)Models/*
	-rm -f $(WEBDIR)admin/server.conf
	-rm -f $(WEBDIR)*~
	-rm -f $(WEBDIR)admin/*~
# reset admin passwd
	-$(MONGOOSEDIR)mongoose -A $(WEBDIR)admin/.htpasswd "mydomain.com" "admin" "admin"
	-rm -rf mongoose
	tar -zxvf ../mongoose-3.0.tgz
	

